swagger: '2.0'

info:
  x-ibm-name: api-finallabo4
  version: 1.0.0
  title: api-finalLabo4

schemes:
  - https
host: $(catalog.host)
basePath: /api

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
 clientIdHeader:
   type: apiKey
   in: header
   name: X-IBM-Client-Id
 clientSecretHeader:
   in: "header"
   name: "X-IBM-Client-Secret"
   type: "apiKey"


security:
 -
   clientIdHeader: []
   clientSecretHeader: []

x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)

paths:
  /Articulos:
    post:
      tags:
        - Articulo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Articulo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    patch:
      tags:
        - Articulo
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Articulo.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    put:
      tags:
        - Articulo
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Articulo.replaceOrCreate__put_Articulos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    get:
      tags:
        - Articulo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Articulo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Articulo'
      deprecated: false
  /Articulos/replaceOrCreate:
    post:
      tags:
        - Articulo
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Articulo.replaceOrCreate__post_Articulos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  /Articulos/upsertWithWhere:
    post:
      tags:
        - Articulo
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Articulo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  '/Articulos/{id}/exists':
    get:
      tags:
        - Articulo
      summary: Check whether a model instance exists in the data source.
      operationId: 'Articulo.exists__get_Articulos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Articulos/{id}':
    head:
      tags:
        - Articulo
      summary: Check whether a model instance exists in the data source.
      operationId: 'Articulo.exists__head_Articulos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Articulo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Articulo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    put:
      tags:
        - Articulo
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Articulo.replaceById__put_Articulos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
    delete:
      tags:
        - Articulo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Articulo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Articulo
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Articulo.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Articulo'
        - name: id
          in: path
          description: Articulo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  '/Articulos/{id}/replace':
    post:
      tags:
        - Articulo
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Articulo.replaceById__post_Articulos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  /Articulos/findOne:
    get:
      tags:
        - Articulo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Articulo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Articulo'
      deprecated: false
  /Articulos/update:
    post:
      tags:
        - Articulo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Articulo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Articulo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Articulos/count:
    get:
      tags:
        - Articulo
      summary: Count instances of the model matched by where from the data source.
      operationId: Articulo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Clientes:
    post:
      tags:
        - Cliente
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Cliente.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    patch:
      tags:
        - Cliente
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Cliente.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    put:
      tags:
        - Cliente
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Cliente.replaceOrCreate__put_Clientes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    get:
      tags:
        - Cliente
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Cliente.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Cliente'
      deprecated: false
  /Clientes/replaceOrCreate:
    post:
      tags:
        - Cliente
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Cliente.replaceOrCreate__post_Clientes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  /Clientes/upsertWithWhere:
    post:
      tags:
        - Cliente
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Cliente.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  '/Clientes/{id}/exists':
    get:
      tags:
        - Cliente
      summary: Check whether a model instance exists in the data source.
      operationId: 'Cliente.exists__get_Clientes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Clientes/{id}':
    head:
      tags:
        - Cliente
      summary: Check whether a model instance exists in the data source.
      operationId: 'Cliente.exists__head_Clientes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Cliente
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Cliente.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    put:
      tags:
        - Cliente
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Cliente.replaceById__put_Clientes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
    delete:
      tags:
        - Cliente
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Cliente.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Cliente
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Cliente.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cliente'
        - name: id
          in: path
          description: Cliente id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  '/Clientes/{id}/replace':
    post:
      tags:
        - Cliente
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Cliente.replaceById__post_Clientes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  /Clientes/findOne:
    get:
      tags:
        - Cliente
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Cliente.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cliente'
      deprecated: false
  /Clientes/update:
    post:
      tags:
        - Cliente
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Cliente.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cliente'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Clientes/count:
    get:
      tags:
        - Cliente
      summary: Count instances of the model matched by where from the data source.
      operationId: Cliente.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Domicilios:
    post:
      tags:
        - Domicilio
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Domicilio.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    patch:
      tags:
        - Domicilio
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Domicilio.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    put:
      tags:
        - Domicilio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Domicilio.replaceOrCreate__put_Domicilios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    get:
      tags:
        - Domicilio
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Domicilio.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/replaceOrCreate:
    post:
      tags:
        - Domicilio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Domicilio.replaceOrCreate__post_Domicilios_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/upsertWithWhere:
    post:
      tags:
        - Domicilio
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Domicilio.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  '/Domicilios/{id}/exists':
    get:
      tags:
        - Domicilio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Domicilio.exists__get_Domicilios_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Domicilios/{id}':
    head:
      tags:
        - Domicilio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Domicilio.exists__head_Domicilios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Domicilio
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Domicilio.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    put:
      tags:
        - Domicilio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Domicilio.replaceById__put_Domicilios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    delete:
      tags:
        - Domicilio
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Domicilio.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Domicilio
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Domicilio.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
        - name: id
          in: path
          description: Domicilio id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  '/Domicilios/{id}/replace':
    post:
      tags:
        - Domicilio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Domicilio.replaceById__post_Domicilios_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/findOne:
    get:
      tags:
        - Domicilio
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Domicilio.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/update:
    post:
      tags:
        - Domicilio
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Domicilio.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Domicilios/count:
    get:
      tags:
        - Domicilio
      summary: Count instances of the model matched by where from the data source.
      operationId: Domicilio.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Pedidoventa:
    post:
      tags:
        - Pedidoventa
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Pedidoventa.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    patch:
      tags:
        - Pedidoventa
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pedidoventa.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    put:
      tags:
        - Pedidoventa
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pedidoventa.replaceOrCreate__put_Pedidoventa
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    get:
      tags:
        - Pedidoventa
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Pedidoventa.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Pedidoventa'
      deprecated: false
  /Pedidoventa/replaceOrCreate:
    post:
      tags:
        - Pedidoventa
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pedidoventa.replaceOrCreate__post_Pedidoventa_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  /Pedidoventa/upsertWithWhere:
    post:
      tags:
        - Pedidoventa
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Pedidoventa.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  '/Pedidoventa/{id}/exists':
    get:
      tags:
        - Pedidoventa
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pedidoventa.exists__get_Pedidoventa_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Pedidoventa/{id}':
    head:
      tags:
        - Pedidoventa
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pedidoventa.exists__head_Pedidoventa_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Pedidoventa
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Pedidoventa.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    put:
      tags:
        - Pedidoventa
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pedidoventa.replaceById__put_Pedidoventa_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
    delete:
      tags:
        - Pedidoventa
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Pedidoventa.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Pedidoventa
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Pedidoventa.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventa'
        - name: id
          in: path
          description: Pedidoventa id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  '/Pedidoventa/{id}/replace':
    post:
      tags:
        - Pedidoventa
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pedidoventa.replaceById__post_Pedidoventa_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  /Pedidoventa/findOne:
    get:
      tags:
        - Pedidoventa
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Pedidoventa.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventa'
      deprecated: false
  /Pedidoventa/update:
    post:
      tags:
        - Pedidoventa
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Pedidoventa.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventa'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Pedidoventa/count:
    get:
      tags:
        - Pedidoventa
      summary: Count instances of the model matched by where from the data source.
      operationId: Pedidoventa.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Rubros:
    post:
      tags:
        - Rubro
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Rubro.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    patch:
      tags:
        - Rubro
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Rubro.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    put:
      tags:
        - Rubro
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Rubro.replaceOrCreate__put_Rubros
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    get:
      tags:
        - Rubro
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Rubro.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Rubro'
      deprecated: false
  /Rubros/replaceOrCreate:
    post:
      tags:
        - Rubro
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Rubro.replaceOrCreate__post_Rubros_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  /Rubros/upsertWithWhere:
    post:
      tags:
        - Rubro
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Rubro.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  '/Rubros/{id}/exists':
    get:
      tags:
        - Rubro
      summary: Check whether a model instance exists in the data source.
      operationId: 'Rubro.exists__get_Rubros_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Rubros/{id}':
    head:
      tags:
        - Rubro
      summary: Check whether a model instance exists in the data source.
      operationId: 'Rubro.exists__head_Rubros_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Rubro
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Rubro.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    put:
      tags:
        - Rubro
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Rubro.replaceById__put_Rubros_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
    delete:
      tags:
        - Rubro
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Rubro.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Rubro
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Rubro.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Rubro'
        - name: id
          in: path
          description: Rubro id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  '/Rubros/{id}/replace':
    post:
      tags:
        - Rubro
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Rubro.replaceById__post_Rubros_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  /Rubros/findOne:
    get:
      tags:
        - Rubro
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Rubro.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Rubro'
      deprecated: false
  /Rubros/update:
    post:
      tags:
        - Rubro
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Rubro.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Rubro'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Rubros/count:
    get:
      tags:
        - Rubro
      summary: Count instances of the model matched by where from the data source.
      operationId: Rubro.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Pedidoventadetalles:
    post:
      tags:
        - Pedidoventadetalle
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Pedidoventadetalle.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    patch:
      tags:
        - Pedidoventadetalle
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pedidoventadetalle.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    put:
      tags:
        - Pedidoventadetalle
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pedidoventadetalle.replaceOrCreate__put_Pedidoventadetalles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    get:
      tags:
        - Pedidoventadetalle
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Pedidoventadetalle.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  /Pedidoventadetalles/replaceOrCreate:
    post:
      tags:
        - Pedidoventadetalle
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pedidoventadetalle.replaceOrCreate__post_Pedidoventadetalles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  /Pedidoventadetalles/upsertWithWhere:
    post:
      tags:
        - Pedidoventadetalle
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Pedidoventadetalle.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  '/Pedidoventadetalles/{id}/exists':
    get:
      tags:
        - Pedidoventadetalle
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pedidoventadetalle.exists__get_Pedidoventadetalles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Pedidoventadetalles/{id}':
    head:
      tags:
        - Pedidoventadetalle
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pedidoventadetalle.exists__head_Pedidoventadetalles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Pedidoventadetalle
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Pedidoventadetalle.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    put:
      tags:
        - Pedidoventadetalle
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pedidoventadetalle.replaceById__put_Pedidoventadetalles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
    delete:
      tags:
        - Pedidoventadetalle
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Pedidoventadetalle.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Pedidoventadetalle
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Pedidoventadetalle.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventadetalle'
        - name: id
          in: path
          description: Pedidoventadetalle id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  '/Pedidoventadetalles/{id}/replace':
    post:
      tags:
        - Pedidoventadetalle
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pedidoventadetalle.replaceById__post_Pedidoventadetalles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  /Pedidoventadetalles/findOne:
    get:
      tags:
        - Pedidoventadetalle
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Pedidoventadetalle.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pedidoventadetalle'
      deprecated: false
  /Pedidoventadetalles/update:
    post:
      tags:
        - Pedidoventadetalle
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Pedidoventadetalle.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pedidoventadetalle'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Pedidoventadetalles/count:
    get:
      tags:
        - Pedidoventadetalle
      summary: Count instances of the model matched by where from the data source.
      operationId: Pedidoventadetalle.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false


definitions:
  Articulo:
    properties:
      idArticulo:
        type: number
        format: double
      codigo:
        maxLength: 15
        type: string
      denominacion:
        maxLength: 50
        type: string
      preciocompra:
        type: number
        format: double
      precioventa:
        type: number
        format: double
      iva:
        type: number
        format: double
      idRubro:
        type: number
        format: double
    required:
      - idArticulo
      - codigo
      - denominacion
      - preciocompra
      - precioventa
      - iva
      - idRubro
    additionalProperties: false
  x-any:
    properties: {}
  Cliente:
    properties:
      idCliente:
        type: number
        format: double
      razonsocial:
        maxLength: 50
        type: string
      cuit:
        maxLength: 50
        type: string
      saldo:
        type: number
        format: double
      idDomicilio:
        type: number
        format: double
      idDomicilionegocio:
        type: number
        format: double
    required:
      - idCliente
      - razonsocial
      - cuit
      - idDomicilio
      - idDomicilionegocio
    additionalProperties: false
  Domicilio:
    properties:
      idDomicilio:
        type: number
        format: double
      calle:
        maxLength: 50
        type: string
      numero:
        type: number
        format: double
      localidad:
        maxLength: 50
        type: string
      latitud:
        maxLength: 50
        type: string
      longitud:
        maxLength: 50
        type: string
    required:
      - idDomicilio
      - calle
      - numero
      - localidad
    additionalProperties: false
  Pedidoventa:
    properties:
      idPedidoventa:
        type: number
        format: double
      fechaestimadaentrega:
        type: string
        format: date-time
      gastosenvio:
        type: number
        format: double
      estado:
        maxLength: 50
        type: string
      entregado:
        type: boolean
      fechapedido:
        type: string
        format: date-time
      nropedido:
        type: number
        format: double
      subtotal:
        type: number
        format: double
      montototal:
        type: number
        format: double
      idCliente:
        type: number
        format: double
      idDomicilio:
        type: number
        format: double
    required:
      - idPedidoventa
      - fechaestimadaentrega
      - gastosenvio
      - estado
      - entregado
      - fechapedido
      - nropedido
      - subtotal
      - montototal
      - idCliente
      - idDomicilio
    additionalProperties: false
  Rubro:
    properties:
      idRubro:
        type: number
        format: double
      codigo:
        maxLength: 15
        type: string
      denominacion:
        maxLength: 50
        type: string
      idRubroprimario:
        type: number
        format: double
    required:
      - idRubro
      - codigo
      - denominacion
    additionalProperties: false
  Pedidoventadetalle:
    properties:
      idPedidoventadetalle:
        type: number
        format: double
      cantidad:
        type: number
        format: double
      subtotal:
        type: number
        format: double
      porcentajedescuento:
        type: number
        format: double
      idArticulo:
        type: number
        format: double
      idPedidoventa:
        type: number
        format: double
    required:
      - idPedidoventadetalle
      - cantidad
      - subtotal
      - idPedidoventa
    additionalProperties: false

